// Code generated by mockery v2.10.0. DO NOT EDIT.

package rater

import (
	mock "github.com/stretchr/testify/mock"

	types "github.com/superoo7/go-gecko/v3/types"
)

// MockCoinGeckoService is an autogenerated mock type for the CoinGeckoService type
type MockCoinGeckoService struct {
	mock.Mock
}

// CoinsList provides a mock function with given fields:
func (_m *MockCoinGeckoService) CoinsList() (*types.CoinList, error) {
	ret := _m.Called()

	var r0 *types.CoinList
	if rf, ok := ret.Get(0).(func() *types.CoinList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.CoinList)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SimplePrice provides a mock function with given fields: ids, vsCurrencies
func (_m *MockCoinGeckoService) SimplePrice(ids []string, vsCurrencies []string) (*map[string]map[string]float32, error) {
	ret := _m.Called(ids, vsCurrencies)

	var r0 *map[string]map[string]float32
	if rf, ok := ret.Get(0).(func([]string, []string) *map[string]map[string]float32); ok {
		r0 = rf(ids, vsCurrencies)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*map[string]map[string]float32)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string, []string) error); ok {
		r1 = rf(ids, vsCurrencies)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
