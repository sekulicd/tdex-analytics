syntax = "proto3";

package tdexa.v1;

import "google/api/annotations.proto";

/**
 * Analytics service spec
 */
service Analytics {
  // returns all markets and its balances in time series
  rpc MarketsBalances(MarketsBalancesRequest) returns (MarketsBalancesReply) {
    option (google.api.http) = {
      post: "/v1/balances"
      body: "*"
    };
  }
  // returns all markets and its prices in time series
  rpc MarketsPrices(MarketsPricesRequest) returns (MarketsPricesReply) {
    option (google.api.http) = {
      post: "/v1/prices"
      body: "*"
    };
  }
  // return market id's to be used, if needed, as filter for MarketsBalances/MarketsPrices rpcs
  rpc ListMarkets(ListMarketsRequest) returns (ListMarketsReply) {
    option (google.api.http) = {
      post: "/v1/markets"
      body: "*"
    };
  }
}

message MarketsBalancesRequest {
  // time_range fetch balances from time range
  TimeRange time_range = 1;
  // fetch balances for specific one or more market's, if no market_id is passed balances will be fetched for all
  repeated string market_ids = 2;
  // pagination
  Page page = 3;
  // used to group balances by time_frame for the specified time_range
  TimeFrame time_frame = 4;
}
message MarketsBalancesReply {
  // returns map of market_id and its balances sorted by time ASC
  map<string, MarketBalances> markets_balances = 1;
}
message MarketBalances {
  repeated MarketBalance market_balance = 1;
}
message MarketBalance {
  // base balance
  double base_balance = 1;
  // quote balance
  double quote_balance = 2;
  // point in time when market had this balance
  string time = 3;
}

message MarketsPricesRequest {
  // time_range fetch prices for time range
  TimeRange time_range = 1;
  // fetch prices for specific one or more market's, if no market_id is passed balances will be fetched for all
  repeated string market_ids = 2;
  // reference fiat currency to which base and quote will be converted
  string reference_currency = 3;
  // pagination. Leave empty to return all
  Page page = 4;
  // used to group balances by time_frame for the specified time_range
  TimeFrame time_frame = 5;
}
message MarketsPricesReply {
  // returns map of market_id and its prices sorted by time ASC
  map<string, MarketPrices> markets_prices = 1;
}
message MarketPrices {
  // returns list of Market's and their prices
  repeated MarketPrice market_price = 1;
}
message MarketPrice {
  // base is the price of one unit of the base asset, priced in quote asset assuming the trade amount was, ie. 100 unit of that asset
  double base_price = 1;
  // quote amount
  double quote_price = 2;
  // base price converted to reference one
  double base_reference_price = 3;
  // quote price converted to reference one
  double quote_reference_price = 4;
  // point in time when market had this price
  string time = 5;
}

// TimeRange is flexible type used to determine time span for which specific
// api will fetch data, either one of predefined_period or custom_period should be provided.
message TimeRange {
  // predefined time_period till now
  PredefinedPeriod predefined_period = 1;
  // granular time range
  CustomPeriod custom_period = 2;
}

message CustomPeriod {
  // start_date in RFC3339 format
  string start_date = 1;
  // end_date in RFC3339 format
  string end_date = 2;
}

enum TimeFrame {
  TF_NULL = 0;
  TIME_FRAME_HOUR = 1;
  TIME_FRAME_FOUR_HOURS = 2;
  TIME_FRAME_DAY = 3;
  TIME_FRAME_WEEK = 4;
  TIME_FRAME_MONTH = 5;
}

enum PredefinedPeriod {
  NULL = 0;
  LAST_HOUR = 1;
  LAST_DAY = 2;
  LAST_MONTH = 3;
  LAST_3_MONTHS = 4;
  YEAR_TO_DATE = 5;
  ALL = 6;
  LAST_YEAR = 7;
}

message ListMarketsRequest {
  repeated MarketProvider market_providers = 1;
  Page page = 2;
}

message ListMarketsReply {
  repeated MarketIDInfo markets = 1;
}

message MarketIDInfo {
  uint64 id = 1;
  MarketProvider market_provider = 2;
}

message MarketProvider {
  string url = 1;
  string base_asset = 2;
  string quote_asset = 3;
  bool active = 4;
}

message Page {
  int64 page_number = 1;
  int64 page_size = 2;
}